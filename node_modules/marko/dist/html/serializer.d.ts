import type { Boundary } from "./writer";
export declare function setDebugInfo(obj: WeakKey, file: string, loc: string | 0, vars?: Record<string, string>): void;
export declare class Serializer {
    #private;
    get flushed(): boolean;
    stringify(val: unknown, boundary: Boundary): string;
    nextId(): string;
    symbol(id: string): symbol;
    writeCall(value: unknown, object: unknown, property?: string, spread?: boolean): void;
    writeAssign(value: unknown, object: unknown, property: string): void;
}
export declare function register<T extends WeakKey>(id: string, val: T, scope?: unknown): T;
export declare function registerGetter<T extends WeakKey>(accessor: string, val: T, scope?: unknown): T;
export declare function getRegistered(val: WeakKey): {
    id: string;
    scope: unknown;
} | undefined;
export declare function stringify(val: unknown): string;
export declare function toAccess(accessor: string): string;
