import type { Renderer as ClientRenderer } from "../dom/renderer";
export type Falsy = undefined | null | false | 0 | "";
export type CommentWalker = TreeWalker & Record<string, Comment>;
export interface BranchScope extends Scope {
    ___startNode: ChildNode;
    ___endNode: ChildNode;
    ___parentBranch: BranchScope | undefined;
    ___destroyed: 1 | undefined;
    ___abortScopes: Set<Scope> | undefined;
    ___branchScopes: Set<BranchScope> | undefined;
    ___renderer: ClientRenderer | string;
    ___pendingAsyncCount: number | undefined;
    ___effects: unknown[] | undefined;
}
export interface Scope {
    $global: Record<string, unknown> & {
        ___nextScopeId: number;
    };
    _: Scope | undefined;
    ___id: number;
    ___args: unknown;
    ___creating: 1 | 0 | undefined;
    ___abortControllers: Record<string | number, AbortController | void> | undefined;
    ___closestBranch: BranchScope | undefined;
    [x: string | number]: any;
}
export declare enum ResumeSymbol {
    Node = "*",
    BranchStart = "[",
    BranchEnd = "]",
    BranchSingleNode = "|",
    BranchSingleNodeOnlyChildInParent = "="
}
export { AccessorPrefix, AccessorProp } from "./accessor.debug";
export declare enum NodeType {
    Element = 1,
    Text = 3,
    Comment = 8,
    DocumentFragment = 11
}
export declare enum WalkCode {
    Get = 32,
    Inside = 36,
    Replace = 37,
    EndChild = 38,
    BeginChild = 47,
    BeginChildWithVar = 48,
    DynamicTagWithVar = 49,
    Next = 67,
    NextEnd = 91,
    Over = 97,
    OverEnd = 106,
    Out = 107,
    OutEnd = 116,
    Multiplier = 117,
    MultiplierEnd = 126
}
export declare enum WalkRangeSize {
    Next = 20,// 67 through 91
    Over = 10,// 97 through 106
    Out = 10,// 107 through 116
    Multiplier = 10
}
export type Accessor = string | number;
export interface $Global {
    [x: PropertyKey]: unknown;
    signal?: AbortSignal;
    cspNonce?: string;
    renderId?: string;
    runtimeId?: string;
}
export interface Input {
    [x: PropertyKey]: unknown;
}
export interface TemplateInput extends Input {
    $global?: $Global;
}
export interface Template {
    mount(input: Input, reference: Node, position?: InsertPosition): MountedTemplate;
    render(input?: Input): RenderedTemplate;
}
export interface MountedTemplate {
    value: unknown;
    update(input: unknown): void;
    destroy(): void;
}
export type RenderedTemplate = PromiseLike<string> & AsyncIterable<string> & {
    toReadable(): ReadableStream<Uint8Array<ArrayBufferLike>>;
};
export declare enum ControlledType {
    InputChecked = 0,
    InputCheckedValue = 1,
    InputValue = 2,
    SelectValue = 3,
    DetailsOrDialogOpen = 4,
    None = 5
}
