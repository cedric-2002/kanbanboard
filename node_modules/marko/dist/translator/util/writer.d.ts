import { types as t } from "@marko/compiler";
import { type Section } from "../util/sections";
import { type Binding } from "./references";
import type { SerializeReason } from "./serialize-reasons";
export declare function writeTo(path: t.NodePath<any>, trailer?: boolean): (strs: TemplateStringsArray, ...exprs: Array<string | t.Expression>) => void;
export declare function consumeHTML(path: t.NodePath<any>): t.ExpressionStatement | undefined;
export declare function flushBefore(path: t.NodePath<any>): void;
export declare function flushInto(path: t.NodePath<t.MarkoTag> | t.NodePath<t.Program>): void;
export declare function getSectionMeta(section: Section): {
    setup: t.Identifier | undefined;
    walks: t.Expression | undefined;
    writes: t.Expression | undefined;
};
export declare function markNode(path: t.NodePath<t.MarkoTag | t.MarkoPlaceholder>, nodeBinding: Binding, reason: undefined | false | SerializeReason): void;
