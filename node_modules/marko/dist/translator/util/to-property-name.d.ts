import { types as t } from "@marko/compiler";
export declare function isValidPropertyIdentifier(name: string): boolean;
export declare function toPropertyName(name: string): t.Identifier | t.StringLiteral | t.NumericLiteral;
export declare function toObjectProperty(name: string, value: t.Expression): t.ObjectProperty;
export declare function toMemberExpression(object: t.Expression, key: string): t.MemberExpression;
export declare function toMemberExpression(object: t.Expression, key: string, optional: false | undefined): t.MemberExpression;
export declare function toMemberExpression(object: t.Expression, key: string, optional: true): t.OptionalMemberExpression;
export declare function toMemberExpression(object: t.Expression, key: string, optional?: boolean): t.MemberExpression | t.OptionalMemberExpression;
