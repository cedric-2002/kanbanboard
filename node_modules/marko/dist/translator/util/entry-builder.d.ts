import { types as t } from "@marko/compiler";
declare module "@marko/compiler/dist/types" {
    interface ProgramExtra {
        needsCompat?: boolean;
        isInteractive?: boolean;
        hasInteractiveChild?: boolean;
    }
}
type EntryFile = t.BabelFile & {
    [kState]?: {
        imports: string[];
        init: boolean;
    };
};
declare const kState: unique symbol;
declare const _default: {
    build(entryFile: EntryFile): t.Statement[];
    visit(file: t.BabelFile, entryFile: EntryFile, visitChild: (id: string) => void): void;
};
export default _default;
