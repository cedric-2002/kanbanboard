import { types as t } from "@marko/compiler";
import { type Binding } from "./references";
import type { Section } from "./sections";
declare const kOnlyChildInParent: unique symbol;
declare const kNodeRef: unique symbol;
declare module "@marko/compiler/dist/types" {
    interface NodeExtra {
        [kOnlyChildInParent]?: false | string;
        [kNodeRef]?: Binding;
    }
}
export declare function getOnlyChildParentTagName(tag: t.NodePath<t.MarkoTag>, branchSize?: number): string | false;
export declare function getOptimizedOnlyChildNodeBinding(tag: t.NodePath<t.MarkoTag>, section: Section, branchSize?: number): Binding;
export {};
