import { types as t } from "@marko/compiler";
import type { SerializeReason, SerializeReasons } from "../../util/serialize-reasons";
export declare function getTemplateContentName(): string;
export declare function getSerializeGuard(reason: undefined | SerializeReason, optional: boolean): t.CallExpression | t.NumericLiteral | undefined;
export declare function getSerializeGuardForAny(reasons: undefined | SerializeReasons, optional: boolean): t.Expression | undefined;
export declare function getExprIfSerialized<T extends undefined | SerializeReason, U extends t.Expression>(reason: T, expr: U): T extends {} ? U : undefined;
declare const _default: {
    translate: {
        exit(this: unknown, program: t.NodePath<t.Program>): void;
    };
};
export default _default;
export declare function replaceRegisteredFunctionNode(node: t.Node, container: t.Node[] | t.Node): t.CallExpression | t.ClassPrivateProperty | t.ClassProperty | t.ObjectProperty | undefined;
