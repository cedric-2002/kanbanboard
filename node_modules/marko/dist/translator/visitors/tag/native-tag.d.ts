import { types as t } from "@marko/compiler";
import { type Binding } from "../../util/references";
export declare const kNativeTagBinding: unique symbol;
export declare const kSkipEndTag: unique symbol;
declare const kGetterId: unique symbol;
declare const kTagContentAttr: unique symbol;
declare module "@marko/compiler/dist/types" {
    interface NodeExtra {
        [kNativeTagBinding]?: Binding;
        [kSkipEndTag]?: true;
        [kGetterId]?: string;
        [kTagContentAttr]?: true;
    }
}
declare const _default: {
    transform: {
        enter(this: unknown, tag: t.NodePath<t.MarkoTag>): void;
    };
    analyze: {
        enter(this: unknown, tag: t.NodePath<t.MarkoTag>): void;
    };
    translate: {
        readonly enter: (path: t.NodePath<t.MarkoTag>) => void;
        readonly exit: (path: t.NodePath<t.MarkoTag>) => void;
    };
};
export default _default;
