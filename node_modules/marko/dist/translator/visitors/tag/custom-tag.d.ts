import { types as t } from "@marko/compiler";
import { type Binding } from "../../util/references";
declare const kChildScopeBinding: unique symbol;
declare const kChildOffsetScopeBinding: unique symbol;
declare const kChildInputSerializePropIds: unique symbol;
declare module "@marko/compiler/dist/types" {
    interface MarkoTagExtra {
        [kChildScopeBinding]?: Binding;
        [kChildOffsetScopeBinding]?: Binding;
        [kChildInputSerializePropIds]?: [symbol, ...symbol[]];
    }
}
declare const _default: {
    analyze: {
        enter(this: unknown, tag: t.NodePath<t.MarkoTag>): void;
    };
    translate: {
        enter(this: unknown, tag: t.NodePath<t.MarkoTag>): void;
        exit(this: unknown, tag: t.NodePath<t.MarkoTag>): void;
    };
};
export default _default;
export declare function getTagRelativePath(tag: t.NodePath<t.MarkoTag>): string;
export declare function getChildScopeBinding(path: t.NodePath<t.MarkoTag>): Binding;
