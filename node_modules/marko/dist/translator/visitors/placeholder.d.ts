import { types as t } from "@marko/compiler";
import { type Binding } from "../util/references";
declare const kNodeBinding: unique symbol;
declare const kSiblingText: unique symbol;
declare const kSharedText: unique symbol;
declare enum SiblingText {
    None = 0,
    Before = 1,
    After = 2
}
declare module "@marko/compiler/dist/types" {
    interface MarkoPlaceholderExtra {
        [kNodeBinding]?: Binding;
        [kSiblingText]?: SiblingText;
        [kSharedText]?: true;
    }
}
declare const _default: {
    analyze(this: unknown, placeholder: t.NodePath<t.MarkoPlaceholder>): void;
    translate: {
        exit(this: unknown, placeholder: t.NodePath<t.MarkoPlaceholder>): void;
    };
};
export default _default;
