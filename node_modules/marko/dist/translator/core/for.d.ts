import { types as t } from "@marko/compiler";
type ForType = "in" | "of" | "to";
declare const _default: {
    analyze(tag: t.NodePath<t.MarkoTag>): void;
    translate: {
        readonly enter: (path: t.NodePath<t.MarkoTag>) => void;
        readonly exit: (path: t.NodePath<t.MarkoTag>) => void;
    };
    parseOptions: {
        controlFlow: true;
    };
    attributes: {
        of: {
            type: string;
            autocomplete: {
                description: string;
            }[];
        };
        in: {
            type: string;
            autocomplete: {
                description: string;
            }[];
        };
        to: {
            type: string;
            autocomplete: {
                description: string;
            }[];
        };
        from: {
            type: string;
            autocomplete: {
                description: string;
            }[];
        };
        step: {
            type: string;
            autocomplete: {
                description: string;
            }[];
        };
    };
    autocomplete: ({
        snippet: string;
        description: string;
        descriptionMoreURL: string;
    } | {
        snippet: string;
        descriptionMoreURL: string;
        description?: undefined;
    })[];
};
export default _default;
export declare function buildForRuntimeCall(type: ForType, attrs: Record<string, t.Expression>, params: t.ArrowFunctionExpression["params"], statements: t.Statement[]): t.ExpressionStatement;
export declare function getForType(tag: t.MarkoTag): ForType | undefined;
