import { types as t } from "@marko/compiler";
export declare const IfTag: {
    analyze(tag: t.NodePath<t.MarkoTag>): void;
    translate: {
        readonly enter: (path: t.NodePath<t.MarkoTag>) => void;
        readonly exit: (path: t.NodePath<t.MarkoTag>) => void;
    };
    parseOptions: {
        controlFlow: true;
    };
    autocomplete: {
        snippet: string;
        description: string;
        descriptionMoreURL: string;
    }[];
};
export declare const ElseIfTag: {
    autocomplete: {
        snippet: string;
        description: string;
        descriptionMoreURL: string;
    }[];
    analyze(tag: t.NodePath<t.MarkoTag>): void;
    translate: {
        readonly enter: (path: t.NodePath<t.MarkoTag>) => void;
        readonly exit: (path: t.NodePath<t.MarkoTag>) => void;
    };
    parseOptions: {
        controlFlow: true;
    };
};
export declare const ElseTag: {
    autocomplete: {
        description: string;
        descriptionMoreURL: string;
    }[];
    analyze(tag: t.NodePath<t.MarkoTag>): void;
    translate: {
        readonly enter: (path: t.NodePath<t.MarkoTag>) => void;
        readonly exit: (path: t.NodePath<t.MarkoTag>) => void;
    };
    parseOptions: {
        controlFlow: true;
    };
};
