import { type Accessor, type Scope } from "../common/types";
import { type Renderer } from "./renderer";
export declare function attr(element: Element, name: string, value: unknown): void;
export declare function setAttribute(element: Element, name: string, value: string | undefined): void;
export declare function classAttr(element: Element, value: unknown): void;
export declare function classItems(element: Element, items: Record<string, unknown>): void;
export declare function classItem(element: Element, name: string, value: unknown): void;
export declare function styleAttr(element: Element, value: unknown): void;
export declare function styleItems(element: HTMLElement, items: Record<string, unknown>): void;
export declare function styleItem(element: HTMLElement, name: string, value: unknown): void;
export declare function data(node: Text | Comment, value: unknown): void;
export declare function textContent(node: ParentNode, value: unknown): void;
export declare function attrs(scope: Scope, nodeAccessor: Accessor, nextAttrs: Record<string, unknown>): void;
export declare function attrsAndContent(scope: Scope, nodeAccessor: Accessor, nextAttrs: Record<string, unknown>): void;
export declare function partialAttrs(scope: Scope, nodeAccessor: Accessor, nextAttrs: Record<string, unknown>, skip: Record<string, 1>): void;
export declare function partialAttrsAndContent(scope: Scope, nodeAccessor: Accessor, nextAttrs: Record<string, unknown>, skip: Record<string, 1>): void;
export declare function insertContent(scope: Scope, nodeAccessor: Accessor, value: unknown): void;
export declare function attrsEvents(scope: Scope, nodeAccessor: Accessor): void;
export declare function html(scope: Scope, value: unknown, accessor: Accessor): void;
export declare function normalizeClientRender(value: any): Renderer | undefined;
export declare function props(scope: Scope, nodeIndex: number, index: number): void;
export declare function normalizeAttrValue(value: unknown): string | undefined;
export declare function lifecycle(scope: Scope, index: string | number, thisObj: Record<string, unknown> & {
    onMount?: (this: unknown) => void;
    onUpdate?: (this: unknown) => void;
    onDestroy?: (this: unknown) => void;
}): void;
export declare function removeChildNodes(startNode: ChildNode, endNode: ChildNode): void;
export declare function insertChildNodes(parentNode: ParentNode, referenceNode: Node | null, startNode: Node, endNode: Node): void;
export declare function toInsertNode(startNode: Node, endNode: Node): Node;
