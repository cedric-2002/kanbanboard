import { type Accessor, type BranchScope, type Scope } from "../common/types";
import { type Signal, type SignalFn } from "./signals";
export type Renderer = {
    ___id: string;
    ___setup: undefined | SetupFn;
    ___clone: (branch: BranchScope, ns: string) => void;
    ___params: Signal<unknown> | undefined;
    ___owner: Scope | undefined;
    ___accessor: Accessor | undefined;
    ___localClosures?: Record<Accessor, Signal<unknown>>;
    ___localClosureValues?: Record<Accessor, unknown>;
};
type SetupFn = (scope: Scope) => void;
export declare function createBranch($global: Scope["$global"], renderer: Renderer | string, parentScope: Scope | undefined, parentNode: ParentNode): BranchScope;
export declare function createAndSetupBranch($global: Scope["$global"], renderer: Renderer, parentScope: Scope | undefined, parentNode: ParentNode): BranchScope;
export declare function setupBranch(renderer: Renderer, branch: BranchScope): BranchScope;
export declare function createContent(id: string, template: string | 0, walks?: string | 0, setup?: {
    _: Signal<unknown>;
} | SetupFn | 0, params?: Signal<unknown> | 0, dynamicScopesAccessor?: Accessor): (owner?: Scope) => Renderer;
export declare function registerContent(id: string, template: string | 0, walks?: string | 0, setup?: SetupFn | 0, params?: Signal<unknown> | 0, dynamicScopesAccessor?: Accessor): (owner?: Scope) => Renderer;
export declare function localClosures(renderer: ReturnType<typeof createContent>, closureFns: Record<Accessor, SignalFn<unknown>>): (owner: Scope, closureValues: Record<Accessor, unknown>) => Renderer;
export declare function createRenderer(template: string | 0, walks?: string | 0, setup?: SetupFn | 0, params?: Signal<unknown> | 0): Renderer;
export {};
