import { type Accessor, type BranchScope, type Scope } from "../common/types";
import { type Renderer } from "./renderer";
import { type Signal } from "./signals";
export declare function awaitTag(nodeAccessor: Accessor, renderer: Renderer): (scope: Scope, promise: Promise<unknown>) => void;
export declare function createTry(nodeAccessor: Accessor, tryContent: Renderer): (scope: Scope, input: {
    catch: unknown;
    placeholder: unknown;
}) => void;
export declare function renderCatch(scope: Scope, error: unknown): void;
export declare function conditional(nodeAccessor: Accessor, ...branches: Renderer[]): (scope: Scope, newBranch: number) => void;
export declare function patchDynamicTag(fn: <T extends typeof dynamicTag>(cond: T) => T): void;
export declare let dynamicTag: (nodeAccessor: Accessor, getContent?: ((scope: Scope) => Renderer) | 0, getTagVar?: (() => Signal<unknown>) | 0, inputIsArgs?: 1) => Signal<Renderer | string | undefined>;
export declare function setConditionalRenderer<T>(scope: Scope, nodeAccessor: Accessor, newRenderer: T, createBranch: ($global: Scope["$global"], renderer: NonNullable<T>, parentScope: Scope, parentNode: ParentNode) => BranchScope): void;
export declare function loopOf(nodeAccessor: Accessor, renderer: Renderer): (scope: Scope, value: [all: unknown[], by?: ((item: unknown, index: number) => unknown) | undefined]) => void;
export declare function loopIn(nodeAccessor: Accessor, renderer: Renderer): (scope: Scope, value: [obj: {}, by?: ((key: string, v: unknown) => unknown) | undefined]) => void;
export declare function loopTo(nodeAccessor: Accessor, renderer: Renderer): (scope: Scope, value: [to: number, from: number, step: number, by?: ((v: number) => unknown) | undefined]) => void;
