import { type Accessor, type Scope } from "../common/types";
export type SignalFn<T> = (scope: Scope, value?: T) => void;
export type Signal<T> = SignalFn<T> & {
    ___subscribe?(scope: Scope): void;
};
export declare function state<T>(valueAccessor: Accessor, fn: SignalFn<T>): (scope: Scope, value: T, valueChange?: (v: T) => void) => T;
export declare function value<T>(valueAccessor: Accessor, fn?: SignalFn<T>): Signal<T>;
export declare function intersection(id: number, fn: SignalFn<never>, defaultPending?: number, scopeIdAccessor?: Accessor): Signal<never>;
export declare function loopClosure<T>(valueAccessor: Accessor, ownerLoopNodeAccessor: Accessor, fn: SignalFn<T>): SignalFn<T>;
export declare function conditionalClosure<T>(valueAccessor: Accessor, ownerConditionalNodeAccessor: Accessor, branch: number, fn: SignalFn<T>): SignalFn<T>;
export declare function subscribeToScopeSet(ownerScope: Scope, accessor: Accessor, scope: Scope): void;
export declare function dynamicClosure(...closureSignals: ReturnType<typeof dynamicClosureRead>[]): (scope: Scope) => void;
export declare function dynamicClosureRead<T>(valueAccessor: Accessor, fn: Signal<T>, getOwnerScope?: (scope: Scope) => Scope): ((scope: Scope) => void) & {
    ___scopeInstancesAccessor: string;
    ___signalIndexAccessor: string;
    ___index: number;
};
export declare function setTagVar(scope: Scope, childAccessor: Accessor, tagVarSignal: Signal<unknown>): void;
export declare const tagVarSignal: (scope: Scope, value: unknown) => any;
export declare function setTagVarChange(scope: Scope, changeHandler: (value: unknown) => void): void;
export declare const tagVarSignalChange: (scope: Scope, value: unknown) => any;
export declare function nextTagId({ $global }: Scope): string;
export declare function effect(id: string, fn: (scope: Scope) => void): (scope: Scope) => void;
export declare function hoist(...path: Accessor[]): (scope: Scope) => (...args: unknown[]) => any;
