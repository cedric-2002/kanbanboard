import type { Scope } from "../common/types";
import type { Signal } from "./signals";
type ExecFn<S extends Scope = Scope> = (scope: S, arg?: any) => void;
export declare const caughtError: WeakSet<unknown[]>;
export declare const placeholderShown: WeakSet<unknown[]>;
export declare let pendingEffects: unknown[];
export declare let pendingScopes: Scope[];
export declare let rendering: undefined | 0 | 1;
export declare function queueRender<T>(scope: Scope, signal: Signal<T>, signalKey: number, value?: T, scopeKey?: number): void;
export declare function queueEffect<S extends Scope, T extends ExecFn<S>>(scope: S, fn: T): void;
export declare function run(): void;
export declare function prepareEffects(fn: () => void): unknown[];
export declare let runEffects: (effects: unknown[]) => void;
export declare let enableCatch: () => void;
export {};
